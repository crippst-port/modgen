define(["core/modal_events","aiplacement_modgen/modal"], function(ModalEvents, ModgenModal) {
	var createButton = function(params) {
		var button = document.createElement('button');
		button.type = 'button';
		button.classList.add('btn', 'btn-primary', 'aiplacement-modgen__fab');
		button.setAttribute('aria-label', params.arialabel);
		button.setAttribute('aria-haspopup', 'dialog');
		button.setAttribute('aria-expanded', 'false');
		button.textContent = params.buttonlabel;
		document.body.appendChild(button);
		return button;
	};

	var modalPromise = null;
	var modalInstance = null;
	var shouldRefresh = false;
	var reloadTriggered = false;

	var getModalUrl = function(baseUrl, params) {
		var url = new URL(baseUrl, window.location.origin);
		url.searchParams.set('ajax', '1');
		if (params.embedded) {
			url.searchParams.set('embedded', '1');
		}
		if (typeof M !== 'undefined' && M.cfg && M.cfg.sesskey && !url.searchParams.has('sesskey')) {
			url.searchParams.set('sesskey', M.cfg.sesskey);
		}
		return url;
	};

	var executeInlineScripts = function() {
		if (!modalInstance) {
			return;
		}

		var body = modalInstance.getBody();
		var bodyNode = body && body.length ? body.get(0) : null;

		if (!bodyNode) {
			return;
		}

		var scripts = bodyNode.querySelectorAll('script');
		Array.prototype.forEach.call(scripts, function(script) {
			var replacement = document.createElement('script');
			if (script.type) {
				replacement.type = script.type;
			}
			if (script.src) {
				replacement.src = script.src;
				replacement.async = false;
			} else {
				replacement.text = script.textContent;
			}
			script.parentNode.replaceChild(replacement, script);
		});

		if (typeof M !== 'undefined' && M.form && typeof M.form.updateFormState === 'function') {
			var forms = bodyNode.querySelectorAll('form.mform');
			Array.prototype.forEach.call(forms, function(form) {
				try {
					M.form.updateFormState(form.getAttribute('id'));
				} catch (error) {
					console.warn('Failed to refresh form state', error);
				}
			});
		}
	};

	var injectFooterButtons = function() {
		if (!modalInstance) {
			return;
		}

		var body = modalInstance.getBody();
		var bodyNode = body && body.length ? body.get(0) : null;
		var footer = modalInstance.getFooter();
		var footerNode = footer && footer.length ? footer.get(0) : null;

		if (!bodyNode || !footerNode) {
			return;
		}

		var submitAreas = bodyNode.querySelectorAll('.form-submit');
		Array.prototype.forEach.call(submitAreas, function(area) {
			var buttons = area.querySelectorAll('button, input[type="submit"]');
			var fragment = document.createDocumentFragment();
			var createdButtons = false;

			Array.prototype.forEach.call(buttons, function(original) {
				var clone = document.createElement('button');
				var classList = original.className ? original.className.split(' ') : [];
				classList = classList.filter(Boolean);
				if (classList.indexOf('btn') === -1) {
					classList.push('btn');
				}
				var hasVariant = classList.some(function(cls) {
					return cls.indexOf('btn-') === 0;
				});
				if (!hasVariant) {
					classList.push('btn-primary');
				}
				clone.className = classList.join(' ');
				clone.type = 'button';
				clone.textContent = original.tagName === 'INPUT' ? (original.value || original.getAttribute('value') || original.name || '') : original.textContent;
				clone.addEventListener('click', function() {
					var form = original.form;
					if (!form) {
						return;
					}
					if (typeof form.requestSubmit === 'function') {
						form.requestSubmit(original);
					} else {
						original.click();
					}
				});
				fragment.appendChild(clone);
				createdButtons = true;
			});

			if (createdButtons) {
				area.classList.add('aiplacement-modgen__hidden-submit');
				area.setAttribute('aria-hidden', 'true');
				if (!footerNode.innerHTML.trim()) {
					footerNode.innerHTML = '';
				}
				footerNode.appendChild(fragment);
			}
		});

		var footerActions = bodyNode.querySelectorAll('[data-region="aiplacement-modgen-footer"] > *');
		Array.prototype.forEach.call(footerActions, function(element) {
			footerNode.appendChild(element);
		});
	};

	var bindCloseButtons = function() {
		if (!modalInstance) {
			return;
		}

		var body = modalInstance.getBody();
		var bodyNode = body && body.length ? body.get(0) : null;
		if (!bodyNode) {
			return;
		}

		var buttons = bodyNode.querySelectorAll('[data-action="aiplacement-modgen-close"]');
		Array.prototype.forEach.call(buttons, function(button) {
			button.addEventListener('click', function(event) {
				event.preventDefault();
				shouldRefresh = true;
				modalInstance.hide();
			});
		});
	};


	var enhanceForms = function(params) {
		if (!modalInstance) {
			return;
		}

		var body = modalInstance.getBody();
		var bodyNode = body && body.length ? body.get(0) : null;
		if (!bodyNode) {
			return;
		}

		var forms = bodyNode.querySelectorAll('form');
		Array.prototype.forEach.call(forms, function(form) {
			if (form.dataset.modgenEnhanced === '1') {
				return;
			}
			form.dataset.modgenEnhanced = '1';
			form.addEventListener('submit', function(event) {
				event.preventDefault();
				var formData = new FormData(form);
				formData.append('ajax', '1');
				if (params.embedded) {
					formData.append('embedded', '1');
				}
				if (!formData.has('sesskey') && typeof M !== 'undefined' && M.cfg && M.cfg.sesskey) {
					formData.append('sesskey', M.cfg.sesskey);
				}
				loadContent(params, formData);
			});
		});
	};

	var showError = function(message) {
		if (!modalInstance) {
			return;
		}
		var safeMessage = message || 'Unable to load content.';
		modalInstance.setBody('<div class="alert alert-danger" role="alert">' + safeMessage + '</div>');
		modalInstance.setFooter('');
	};

	var setLoadingState = function() {
		if (!modalInstance) {
			return;
		}
		modalInstance.setBody('<div class="aiplacement-modgen__loading"><span class="spinner-border" role="status" aria-hidden="true"></span></div>');
		modalInstance.setFooter('');
	};

	var processPayload = function(payload, params) {
		if (!modalInstance) {
			return;
		}

		if (!payload || typeof payload !== 'object') {
			showError('Unexpected response from server.');
			return;
		}

		if (payload.error) {
			showError(payload.error);
			return;
		}

		if (payload.title) {
			modalInstance.setTitle(payload.title);
		}

		var bodyHtml = payload.body || '';
		var footerHtml = payload.footer || '';
		modalInstance.setBody(bodyHtml);
		modalInstance.setFooter(footerHtml);

	shouldRefresh = shouldRefresh || Boolean(payload.refresh);

	executeInlineScripts();
		injectFooterButtons();
		enhanceForms(params);
		bindCloseButtons();

		if (payload.close) {
			modalInstance.hide();
		}
	};

	var loadContent = function(params, formData) {
		if (!modalInstance) {
			return Promise.resolve();
		}

		setLoadingState();

		var url = getModalUrl(params.url, params);
		var options = {
			method: formData ? 'POST' : 'GET',
			credentials: 'same-origin',
			headers: {
				'Accept': 'application/json'
			}
		};

		if (formData) {
			options.body = formData;
		}

		return fetch(url.toString(), options)
			.then(function(response) {
				if (!response.ok) {
					throw new Error('Failed to load modal content.');
				}
				return response.json();
			})
			.then(function(payload) {
				processPayload(payload, params);
			})
			.catch(function(error) {
				console.error(error);
				showError(error.message);
			});
	};

	var getModal = function(params, trigger) {
		if (!modalPromise) {
			modalPromise = ModgenModal.create({
				title: params.dialogtitle,
				body: ''
			}).then(function(modal) {
				modalInstance = modal;

				modal.getRoot().on(ModalEvents.shown, function() {
					trigger.setAttribute('aria-expanded', 'true');
					if (!modalInstance.getBody().html()) {
						loadContent(params);
					}
				});

				modal.getRoot().on(ModalEvents.hidden, function() {
					trigger.setAttribute('aria-expanded', 'false');
					if (shouldRefresh && !reloadTriggered) {
						reloadTriggered = true;
						window.location.reload();
					}
				});

				modal.getRoot().on(ModalEvents.destroyed, function() {
					modalPromise = null;
					modalInstance = null;
					shouldRefresh = false;
					reloadTriggered = false;
					trigger.setAttribute('aria-expanded', 'false');
				});

				return modal;
			}).catch(function(error) {
				modalPromise = null;
				modalInstance = null;
				shouldRefresh = false;
				reloadTriggered = false;
				throw error;
			});
		}

		return modalPromise;
	};

	var init = function(params) {
		if (!params || !params.url) {
			return;
		}

		params.embedded = params.embedded || params.url.indexOf('embedded=1') !== -1;

		if (document.querySelector('.aiplacement-modgen__fab')) {
			return;
		}

		var trigger = createButton(params);

		trigger.addEventListener('click', function(event) {
			event.preventDefault();
			getModal(params, trigger).then(function(modal) {
				modal.show();
				if (!modal.getBody().html()) {
					loadContent(params);
				}
			}).catch(function(error) {
				console.error('Failed to initialise Module Generator modal', error);
				trigger.remove();
			});
		});
	};

	return {init: init};
});